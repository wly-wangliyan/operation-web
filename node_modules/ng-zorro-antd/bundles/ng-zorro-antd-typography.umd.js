(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ng-zorro-antd/core'), require('ng-zorro-antd/i18n'), require('ng-zorro-antd/icon'), require('ng-zorro-antd/input'), require('ng-zorro-antd/tooltip'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/platform')) :
    typeof define === 'function' && define.amd ? define('ng-zorro-antd/typography', ['exports', '@angular/common', '@angular/core', 'ng-zorro-antd/core', 'ng-zorro-antd/i18n', 'ng-zorro-antd/icon', 'ng-zorro-antd/input', 'ng-zorro-antd/tooltip', 'rxjs', 'rxjs/operators', '@angular/cdk/platform'], factory) :
    (global = global || self, factory((global['ng-zorro-antd'] = global['ng-zorro-antd'] || {}, global['ng-zorro-antd'].typography = {}), global.ng.common, global.ng.core, global['ng-zorro-antd'].core, global['ng-zorro-antd'].i18n, global['ng-zorro-antd'].icon, global['ng-zorro-antd'].input, global['ng-zorro-antd'].tooltip, global.rxjs, global.rxjs.operators, global.ng.cdk.platform));
}(this, function (exports, common, core, core$1, i18n, icon, input, tooltip, rxjs, operators, platform) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzTextCopyComponent = /** @class */ (function () {
        function NzTextCopyComponent(host, cdr, copyToClipboard, i18n) {
            this.host = host;
            this.cdr = cdr;
            this.copyToClipboard = copyToClipboard;
            this.i18n = i18n;
            this.copied = false;
            // tslint:disable-next-line:no-any
            this.locale = {};
            this.nativeElement = this.host.nativeElement;
            this.destroy$ = new rxjs.Subject();
            this.textCopy = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        NzTextCopyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.i18n.localeChange.pipe(operators.takeUntil(this.destroy$)).subscribe((/**
             * @return {?}
             */
            function () {
                _this.locale = _this.i18n.getLocaleData('Text');
                _this.cdr.markForCheck();
            }));
        };
        /**
         * @return {?}
         */
        NzTextCopyComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            clearTimeout(this.copyId);
        };
        /**
         * @return {?}
         */
        NzTextCopyComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.copied) {
                return;
            }
            this.copied = true;
            this.cdr.detectChanges();
            /** @type {?} */
            var text = this.text;
            this.textCopy.emit(text);
            this.copyToClipboard
                .copy(text)
                .then((/**
             * @return {?}
             */
            function () { return _this.onCopied(); }))
                .catch((/**
             * @return {?}
             */
            function () { return _this.onCopied(); }));
        };
        /**
         * @return {?}
         */
        NzTextCopyComponent.prototype.onCopied = /**
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.copyId);
            this.copyId = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.copied = false;
                _this.cdr.detectChanges();
            }), 3000);
        };
        NzTextCopyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nz-text-copy',
                        template: "<button\n  nz-tooltip\n  nz-trans-button\n  [nzTitle]=\"copied ? locale?.copied : locale?.copy\"\n  class=\"ant-typography-copy\"\n  [class.ant-typography-copy-success]=\"copied\"\n  (click)=\"onClick()\">\n  <i nz-icon [nzType]=\"copied ? 'check' : 'copy'\"></i>\n</button>\n\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        NzTextCopyComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core$1.NzCopyToClipboardService },
            { type: i18n.NzI18nService }
        ]; };
        NzTextCopyComponent.propDecorators = {
            text: [{ type: core.Input }],
            textCopy: [{ type: core.Output }]
        };
        return NzTextCopyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzTextEditComponent = /** @class */ (function () {
        function NzTextEditComponent(host, cdr, i18n) {
            this.host = host;
            this.cdr = cdr;
            this.i18n = i18n;
            this.editing = false;
            // tslint:disable-next-line:no-any
            this.locale = {};
            this.destroy$ = new rxjs.Subject();
            this.startEditing = new core.EventEmitter();
            this.endEditing = new core.EventEmitter();
            this.nativeElement = this.host.nativeElement;
        }
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.i18n.localeChange.pipe(operators.takeUntil(this.destroy$)).subscribe((/**
             * @return {?}
             */
            function () {
                _this.locale = _this.i18n.getLocaleData('Text');
                _this.cdr.markForCheck();
            }));
        };
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            this.beforeText = this.text;
            this.currentText = this.beforeText;
            this.editing = true;
            this.startEditing.emit();
            this.focusAndSetValue();
        };
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.confirm = /**
         * @return {?}
         */
        function () {
            this.editing = false;
            this.endEditing.emit(this.currentText);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        NzTextEditComponent.prototype.onInput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = (/** @type {?} */ (event.target));
            this.currentText = target.value;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        NzTextEditComponent.prototype.onEnter = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.confirm();
        };
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.onCancel = /**
         * @return {?}
         */
        function () {
            this.currentText = this.beforeText;
            this.confirm();
        };
        /**
         * @return {?}
         */
        NzTextEditComponent.prototype.focusAndSetValue = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.textarea && _this.textarea.nativeElement) {
                    _this.textarea.nativeElement.focus();
                    _this.textarea.nativeElement.value = _this.currentText;
                    _this.autosizeDirective.resizeToFitContent();
                }
            }));
        };
        NzTextEditComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nz-text-edit',
                        template: "<button\n  *ngIf=\"!editing\"\n  [nzTitle]=\"locale?.edit\"\n  nz-tooltip\n  nz-trans-button\n  class=\"ant-typography-edit\"\n  (click)=\"onClick()\">\n  <i nz-icon nzType=\"edit\"></i>\n</button>\n<ng-container *ngIf=\"editing\">\n  <textarea #textarea\n            nz-input\n            nzAutosize\n            (input)=\"onInput($event)\"\n            (blur)=\"confirm()\"\n            (keydown.esc)=\"onCancel()\"\n            (keydown.enter)=\"onEnter($event)\">\n  </textarea>\n  <button nz-trans-button class=\"ant-typography-edit-content-confirm\" (click)=\"confirm()\">\n    <i nz-icon nzType=\"enter\"></i>\n  </button>\n</ng-container>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        NzTextEditComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: i18n.NzI18nService }
        ]; };
        NzTextEditComponent.propDecorators = {
            text: [{ type: core.Input }],
            startEditing: [{ type: core.Output }],
            endEditing: [{ type: core.Output }],
            textarea: [{ type: core.ViewChild, args: ['textarea', { static: false },] }],
            autosizeDirective: [{ type: core.ViewChild, args: [input.NzAutosizeDirective, { static: false },] }]
        };
        return NzTextEditComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzTypographyComponent = /** @class */ (function () {
        function NzTypographyComponent(host, cdr, viewContainerRef, renderer, platform, i18n, nzDomEventService) {
            this.host = host;
            this.cdr = cdr;
            this.viewContainerRef = viewContainerRef;
            this.renderer = renderer;
            this.platform = platform;
            this.i18n = i18n;
            this.nzDomEventService = nzDomEventService;
            this.nzCopyable = false;
            this.nzEditable = false;
            this.nzDisabled = false;
            this.nzExpandable = false;
            this.nzEllipsis = false;
            this.nzEllipsisRows = 1;
            this.nzContentChange = new core.EventEmitter();
            this.nzCopy = new core.EventEmitter();
            this.nzExpandChange = new core.EventEmitter();
            // tslint:disable-next-line:no-any
            this.locale = {};
            this.editing = false;
            this.cssEllipsis = false;
            this.isEllipsis = false;
            this.expanded = false;
            this.ellipsisStr = '...';
            this.viewInit = false;
            this.rfaId = -1;
            this.destroy$ = new rxjs.Subject();
            this.windowResizeSubscription = rxjs.Subscription.EMPTY;
        }
        Object.defineProperty(NzTypographyComponent.prototype, "canCssEllipsis", {
            get: /**
             * @return {?}
             */
            function () {
                return this.nzEllipsis && this.cssEllipsis && !this.expanded;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzTypographyComponent.prototype, "copyText", {
            get: /**
             * @return {?}
             */
            function () {
                return typeof this.nzCopyText === 'string' ? this.nzCopyText : this.nzContent;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} text
         * @return {?}
         */
        NzTypographyComponent.prototype.onTextCopy = /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.nzCopy.emit(text);
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.onStartEditing = /**
         * @return {?}
         */
        function () {
            this.editing = true;
        };
        /**
         * @param {?} text
         * @return {?}
         */
        NzTypographyComponent.prototype.onEndEditing = /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.editing = false;
            this.nzContentChange.emit(text);
            if (this.nzContent === text) {
                this.renderOnNextFrame();
            }
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.onExpand = /**
         * @return {?}
         */
        function () {
            this.expanded = true;
            this.nzExpandChange.emit();
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.canUseCSSEllipsis = /**
         * @return {?}
         */
        function () {
            if (this.nzEditable || this.nzCopyable || this.nzExpandable) {
                return false;
            }
            if (this.nzEllipsisRows === 1) {
                return core$1.isStyleSupport('textOverflow');
            }
            else {
                return core$1.isStyleSupport('webkitLineClamp');
            }
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.renderOnNextFrame = /**
         * @return {?}
         */
        function () {
            var _this = this;
            core$1.cancelRequestAnimationFrame(this.rfaId);
            if (!this.viewInit || !this.nzEllipsis || this.nzEllipsisRows < 0 || this.expanded || !this.platform.isBrowser) {
                return;
            }
            this.rfaId = core$1.reqAnimFrame((/**
             * @return {?}
             */
            function () {
                _this.syncEllipsis();
            }));
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.getOriginContentViewRef = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate, {
                content: this.nzContent
            });
            viewRef.detectChanges();
            return {
                viewRef: viewRef,
                removeView: (/**
                 * @return {?}
                 */
                function () {
                    _this.viewContainerRef.remove(_this.viewContainerRef.indexOf(viewRef));
                })
            };
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.syncEllipsis = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.cssEllipsis) {
                return;
            }
            var _a = this.getOriginContentViewRef(), viewRef = _a.viewRef, removeView = _a.removeView;
            /** @type {?} */
            var fixedNodes = [this.textCopyRef, this.textEditRef, this.expandableBtn]
                .filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e && e.nativeElement; }))
                .map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.nativeElement; }));
            var _b = core$1.measure(this.host.nativeElement, this.nzEllipsisRows, viewRef.rootNodes, fixedNodes, this.ellipsisStr), contentNodes = _b.contentNodes, text = _b.text, ellipsis = _b.ellipsis;
            removeView();
            this.ellipsisText = text;
            this.isEllipsis = ellipsis;
            /** @type {?} */
            var ellipsisContainerNativeElement = this.ellipsisContainer.nativeElement;
            while (ellipsisContainerNativeElement.firstChild) {
                this.renderer.removeChild(ellipsisContainerNativeElement, ellipsisContainerNativeElement.firstChild);
            }
            contentNodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.renderer.appendChild(ellipsisContainerNativeElement, n.cloneNode(true));
            }));
            this.cdr.markForCheck();
        };
        /**
         * @private
         * @return {?}
         */
        NzTypographyComponent.prototype.renderAndSubscribeWindowResize = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.platform.isBrowser) {
                this.windowResizeSubscription.unsubscribe();
                this.cssEllipsis = this.canUseCSSEllipsis();
                this.renderOnNextFrame();
                this.windowResizeSubscription = this.nzDomEventService
                    .registerResizeListener()
                    .pipe(operators.takeUntil(this.destroy$), operators.finalize((/**
                 * @return {?}
                 */
                function () { return _this.nzDomEventService.unregisterResizeListener(); })))
                    .subscribe((/**
                 * @return {?}
                 */
                function () { return _this.renderOnNextFrame(); }));
            }
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.i18n.localeChange.pipe(operators.takeUntil(this.destroy$)).subscribe((/**
             * @return {?}
             */
            function () {
                _this.locale = _this.i18n.getLocaleData('Text');
                _this.cdr.markForCheck();
            }));
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.viewInit = true;
            this.renderAndSubscribeWindowResize();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NzTypographyComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var nzCopyable = changes.nzCopyable, nzEditable = changes.nzEditable, nzExpandable = changes.nzExpandable, nzEllipsis = changes.nzEllipsis, nzContent = changes.nzContent, nzEllipsisRows = changes.nzEllipsisRows;
            if (nzCopyable || nzEditable || nzExpandable || nzEllipsis || nzContent || nzEllipsisRows) {
                if (this.nzEllipsis) {
                    if (this.expanded) {
                        this.windowResizeSubscription.unsubscribe();
                    }
                    else {
                        this.renderAndSubscribeWindowResize();
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        NzTypographyComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy$.next();
            this.destroy$.complete();
            this.windowResizeSubscription.unsubscribe();
        };
        NzTypographyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "\n  nz-typography,\n  [nz-typography],\n  p[nz-paragraph],\n  span[nz-text],\n  h1[nz-title], h2[nz-title], h3[nz-title], h4[nz-title]\n  ",
                        template: "<ng-template #contentTemplate let-content=\"content\">\n  <ng-content *ngIf=\"!content\"></ng-content>\n  {{content}}\n</ng-template>\n\n<ng-container *ngIf=\"!editing\">\n  <ng-container *ngIf=\"expanded || (!nzExpandable && nzEllipsisRows === 1) || canCssEllipsis\">\n    <ng-template [ngTemplateOutlet]=\"contentTemplate\" [ngTemplateOutletContext]=\"{ content: nzContent}\"></ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"nzEllipsis && !expanded && (nzEllipsisRows > 1 || nzExpandable)\">\n    <span #ellipsisContainer></span>\n    <ng-container *ngIf=\"isEllipsis\">{{ellipsisStr}}</ng-container>\n    <a #expandable *ngIf=\"nzExpandable && isEllipsis\" class=\"ant-typography-expand\" (click)=\"onExpand()\">{{locale?.expand}}</a>\n  </ng-container>\n</ng-container>\n\n<nz-text-edit\n  *ngIf=\"nzEditable\"\n  [text]=\"nzContent\"\n  (endEditing)=\"onEndEditing($event)\"\n  (startEditing)=\"onStartEditing()\">\n</nz-text-edit>\n\n<nz-text-copy *ngIf=\"nzCopyable && !editing\" [text]=\"copyText\" (textCopy)=\"onTextCopy($event)\"></nz-text-copy>\n\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        preserveWhitespaces: false,
                        host: {
                            '[class.ant-typography]': '!editing',
                            '[class.ant-typography-edit-content]': 'editing',
                            '[class.ant-typography-secondary]': 'nzType === "secondary"',
                            '[class.ant-typography-warning]': 'nzType === "warning"',
                            '[class.ant-typography-danger]': 'nzType === "danger"',
                            '[class.ant-typography-disabled]': 'nzDisabled',
                            '[class.ant-typography-ellipsis]': 'nzEllipsis && !expanded',
                            '[class.ant-typography-ellipsis-single-line]': 'canCssEllipsis && nzEllipsisRows === 1',
                            '[class.ant-typography-ellipsis-multiple-line]': 'canCssEllipsis && nzEllipsisRows > 1',
                            '[style.-webkit-line-clamp]': '(canCssEllipsis && nzEllipsisRows > 1) ? nzEllipsisRows : null'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzTypographyComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: platform.Platform },
            { type: i18n.NzI18nService },
            { type: core$1.NzDomEventService }
        ]; };
        NzTypographyComponent.propDecorators = {
            nzCopyable: [{ type: core.Input }],
            nzEditable: [{ type: core.Input }],
            nzDisabled: [{ type: core.Input }],
            nzExpandable: [{ type: core.Input }],
            nzEllipsis: [{ type: core.Input }],
            nzContent: [{ type: core.Input }],
            nzEllipsisRows: [{ type: core.Input }],
            nzType: [{ type: core.Input }],
            nzCopyText: [{ type: core.Input }],
            nzContentChange: [{ type: core.Output }],
            nzCopy: [{ type: core.Output }],
            nzExpandChange: [{ type: core.Output }],
            textEditRef: [{ type: core.ViewChild, args: [NzTextEditComponent, { static: false },] }],
            textCopyRef: [{ type: core.ViewChild, args: [NzTextCopyComponent, { static: false },] }],
            ellipsisContainer: [{ type: core.ViewChild, args: ['ellipsisContainer', { static: false },] }],
            expandableBtn: [{ type: core.ViewChild, args: ['expandable', { static: false },] }],
            contentTemplate: [{ type: core.ViewChild, args: ['contentTemplate', { static: false },] }]
        };
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzTypographyComponent.prototype, "nzCopyable", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzTypographyComponent.prototype, "nzEditable", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzTypographyComponent.prototype, "nzDisabled", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzTypographyComponent.prototype, "nzExpandable", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzTypographyComponent.prototype, "nzEllipsis", void 0);
        return NzTypographyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzTypographyModule = /** @class */ (function () {
        function NzTypographyModule() {
        }
        NzTypographyModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            icon.NzIconModule,
                            tooltip.NzToolTipModule,
                            input.NzInputModule,
                            i18n.NzI18nModule,
                            core$1.NzTransButtonModule,
                            core$1.NzCopyToClipboardServiceModule
                        ],
                        exports: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent],
                        declarations: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent]
                    },] }
        ];
        return NzTypographyModule;
    }());

    exports.NzTextCopyComponent = NzTextCopyComponent;
    exports.NzTextEditComponent = NzTextEditComponent;
    exports.NzTypographyComponent = NzTypographyComponent;
    exports.NzTypographyModule = NzTypographyModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-zorro-antd-typography.umd.js.map
